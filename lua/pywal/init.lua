
-- Auto-generated by auto-walty.sh

local fn = vim.fn
local api = vim.api

-- Read the JSON palette written by Pywal
local home = fn.expand('~')
local colorsfile = home .. '/.cache/wal/colors.json'

local ok, lines = pcall(fn.readfile, colorsfile)
if not ok then
  vim.notify('pywal.lua: cannot read ' .. colorsfile, vim.log.levels.WARN)
  return
end

local data = fn.json_decode(table.concat(lines, '\n'))

-- Clear existing highlights and reset syntax
api.nvim_command('highlight clear')
if fn.exists('syntax_on') == 1 then
  api.nvim_command('syntax reset')
end

-- Declare scheme name & background mode
vim.g.colors_name = 'pywal'
vim.opt.background = 'dark'

-- Core highlights
api.nvim_set_hl(0, 'Normal', { fg = data.special.foreground, bg = data.special.background })
api.nvim_set_hl(0, 'Cursor', { fg = data.special.background, bg = data.special.foreground })

-- ANSI colours 0â€“15
for i = 0, 15 do
  local hex = data.colors['color' .. i]
  api.nvim_set_hl(0, 'TerminalColor' .. i, { fg = hex })
end

-- Line numbers (gutter)
api.nvim_set_hl(0, 'LineNr',       { fg = data.colors.color8, bg = data.special.background })
api.nvim_set_hl(0, 'CursorLineNr', { fg = data.colors.color9, bg = data.special.background })

-- Highlight the current line
api.nvim_set_hl(0, 'CursorLine',   { bg = data.colors.color0 })

return true
